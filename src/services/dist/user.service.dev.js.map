{"version":3,"sources":["user.service.js"],"names":["require","addUser","findUserByEmail","runQuery","bcrypt","jwt","config","createUser","body","username","email","password","console","log","userExist","length","code","message","data","status","saltRounds","hash","hashSync","response","loginUser","user","dbPassword","id","userPassword","compareSync","options","token","sign","JWT_SECRET_KEY","module","exports"],"mappings":";;eAAqCA,OAAO,CAAC,iBAAD,C;IAApCC,O,YAAAA,O;IAASC,e,YAAAA,e;;gBACIF,OAAO,CAAC,2BAAD,C;IAApBG,Q,aAAAA,Q;;AACR,IAAMC,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMK,GAAG,GAAGL,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAMM,MAAM,GAAGN,OAAO,CAAC,qBAAD,CAAtB;;AAEA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,UAAAA,QADQ,GACsBD,IADtB,CACRC,QADQ,EACEC,KADF,GACsBF,IADtB,CACEE,KADF,EACSC,QADT,GACsBH,IADtB,CACSG,QADT,EAGf;;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,QAAzB,EAJe,CAMf;;AANe;AAAA,0CAOSR,QAAQ,CAACD,eAAD,EAAmB,CAACQ,KAAD,CAAnB,CAPjB;;AAAA;AAOTI,UAAAA,SAPS;;AAAA,gBASXA,SAAS,CAACC,MAAV,GAAmB,CATR;AAAA;AAAA;AAAA;;AAAA,gBAUL;AACFC,YAAAA,IAAI,EAAE,GADJ;AAEFC,YAAAA,OAAO,EAAE,qBAFP;AAGFC,YAAAA,IAAI,EAAE,IAHJ;AAIFC,YAAAA,MAAM,EAAE;AAJN,WAVK;;AAAA;AAkBf;AACMC,UAAAA,UAnBS,GAmBI,EAnBJ,EAqBf;;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BO,UAA5B;AAEMC,UAAAA,IAxBS,GAwBFjB,MAAM,CAACkB,QAAP,CAAgBX,QAAhB,EAA0BS,UAA1B,CAxBE,EA0Bf;;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BQ,IAA/B;AA3Be;AAAA,0CA6BQlB,QAAQ,CAACF,OAAD,EAAU,CAACQ,QAAD,EAAWC,KAAX,EAAkBW,IAAlB,CAAV,CA7BhB;;AAAA;AA6BTE,UAAAA,QA7BS;AAAA,2CA+BR;AACHP,YAAAA,IAAI,EAAE,GADH;AAEHG,YAAAA,MAAM,EAAE,SAFL;AAGHF,YAAAA,OAAO,EAAE,6BAHN;AAIHC,YAAAA,IAAI,EAAEK,QAAQ,CAAC,CAAD;AAJX,WA/BQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAuCA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAOhB,IAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACNE,UAAAA,KADM,GACcF,IADd,CACNE,KADM,EACCC,QADD,GACcH,IADd,CACCG,QADD,EAGd;;AAHc;AAAA,0CAIKR,QAAQ,CAACD,eAAD,EAAkB,CAACQ,KAAD,CAAlB,CAJb;;AAAA;AAIRe,UAAAA,IAJQ;;AAAA,gBAKVA,IAAI,CAACV,MAAL,KAAgB,CALN;AAAA;AAAA;AAAA;;AAAA,gBAMJ;AACFC,YAAAA,IAAI,EAAE,GADJ;AAEFG,YAAAA,MAAM,EAAE,OAFN;AAGFF,YAAAA,OAAO,EAAE,gBAHP;AAIFC,YAAAA,IAAI,EAAE;AAJJ,WANI;;AAAA;AAad;AAbc,mBAcuBO,IAAI,CAAC,CAAD,CAd3B,EAcIC,UAdJ,UAcNf,QAdM,EAcgBgB,EAdhB,UAcgBA,EAdhB;AAedf,UAAAA,OAAO,CAACC,GAAR,CAAYY,IAAI,CAAC,CAAD,CAAhB;AACMG,UAAAA,YAhBQ,GAgBOxB,MAAM,CAACyB,WAAP,CAAmBlB,QAAnB,EAA6Be,UAA7B,CAhBP,EAgBiD;;AAhBjD,cAiBTE,YAjBS;AAAA;AAAA;AAAA;;AAAA,gBAkBJ;AACFZ,YAAAA,IAAI,EAAE,GADJ;AAEFG,YAAAA,MAAM,EAAE,OAFN;AAGFF,YAAAA,OAAO,EAAE,sCAHP;AAIFC,YAAAA,IAAI,EAAE;AAJJ,WAlBI;;AAAA;AA0BRY,UAAAA,OA1BQ,GA0BE;AACZ,yBAAa;AADD,WA1BF,EA8Bd;;AACMC,UAAAA,KA/BQ,GA+BA1B,GAAG,CAAC2B,IAAJ,CAAS;AACnBL,YAAAA,EAAE,EAAFA,EADmB;AAEnBjB,YAAAA,KAAK,EAALA;AAFmB,WAAT,EAIXJ,MAAM,CAAC2B,cAJI,EAIYH,OAJZ,CA/BA;AAAA,4CAoCP;AACHX,YAAAA,MAAM,EAAE,SADL;AAEHF,YAAAA,OAAO,EAAE,yBAFN;AAGHD,YAAAA,IAAI,EAAE,GAHH;AAIHE,YAAAA,IAAI,EAAE;AACFS,cAAAA,EAAE,EAAFA,EADE;AAEFjB,cAAAA,KAAK,EAALA,KAFE;AAGFqB,cAAAA,KAAK,EAALA;AAHE;AAJH,WApCO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;;AAiDAG,MAAM,CAACC,OAAP,GAAiB;AACb5B,EAAAA,UAAU,EAAVA,UADa;AACFiB,EAAAA,SAAS,EAATA;AADE,CAAjB","sourcesContent":["const { addUser, findUserByEmail } = require('../queries/user');\r\nconst { runQuery } = require('../config/database.config')\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst config = require('../config/env/index')\r\n\r\nconst createUser = async (body) => {\r\n    const {username, email, password } = body;\r\n\r\n    // Debug: Check the value of 'password'\r\n    console.log('Password:', password);\r\n\r\n    // Check if user already exists in the database\r\n    const userExist = await runQuery(findUserByEmail,  [email]);\r\n\r\n    if (userExist.length > 0) {\r\n        throw {\r\n            code: 409,\r\n            message: 'User already exists',\r\n            data: null,\r\n            status: 'error'\r\n        };\r\n    }\r\n\r\n    // Encrypt password\r\n    const saltRounds = 12;\r\n    \r\n    // Debug: Check the value of 'saltRounds'\r\n    console.log('Salt Rounds:', saltRounds);\r\n\r\n    const hash = bcrypt.hashSync(password, saltRounds);\r\n    \r\n    // Debug: Check the generated hash\r\n    console.log('Generated Hash:', hash);\r\n\r\n    const response = await runQuery(addUser, [username, email, hash]);\r\n\r\n    return {\r\n        code: 201,\r\n        status: 'success',\r\n        message: 'New user added successfully',\r\n        data: response[0]\r\n    };\r\n}\r\n\r\nconst loginUser = async (body) => {\r\n    const { email, password } = body;\r\n\r\n    // Check if that user exists inside the db\r\n    const user = await runQuery(findUserByEmail, [email]);\r\n    if (user.length === 0) {\r\n        throw {\r\n            code: 404,\r\n            status: 'error',\r\n            message: 'User not found',\r\n            data: null\r\n        }\r\n    }\r\n    // Compare user passwords\r\n    const { password: dbPassword, id } = user[0];\r\n    console.log(user[0])\r\n    const userPassword = bcrypt.compareSync(password, dbPassword); // Boolean true/false\r\n    if (!userPassword) {\r\n        throw {\r\n            code: 400,\r\n            status: 'error',\r\n            message: 'Wrong email and password combination',\r\n            data: null\r\n        }\r\n    }\r\n\r\n    const options = {\r\n        'expiresIn': '1d'\r\n    }\r\n\r\n    // Generate token for authentication purposes\r\n    const token = jwt.sign({\r\n        id,\r\n        email\r\n        \r\n    }, config.JWT_SECRET_KEY, options);\r\n    return {\r\n        status: 'success',\r\n        message: 'User login successfully',\r\n        code: 200,\r\n        data: {\r\n            id,\r\n            email,\r\n            token\r\n        }\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    createUser,loginUser\r\n};"],"file":"user.service.dev.js"}