{"version":3,"sources":["products.service.js"],"names":["require","addProduct","fetchAllProducts","findProductbyName","runQuery","name","price","quantity","productExist","response","regeneratorRuntime","async","_context","prev","next","awrap","sent","length","console","code","createProducts","data","status","abrupt","message","stop","getAllProducts","fetchProducts","_context2","log","t0","error","module","exports"],"mappings":"0BAA2DA,QAAQ,uBAA3DC,oBAAAA,WAAYC,0BAAAA,iBAAkBC,2BAAAA,4BACjBH,QAAQ,6BAArBI,mBAAAA,SADAH,eAGe,SAHfA,GAGe,IAAAI,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAHHZ,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,MAIKK,EAJLL,EAIKK,SADFK,EAAAE,KAAA,EAAAJ,mBAAAK,MAEOX,SALQD,kBAKoB,CAACE,KAFpC,KAAA,EAAA,GAGO,GANQF,EAGfS,EAAAI,MAGFC,OAHE,MAIfC,QANalB,IAAAA,GAOR,CACDmB,KAAK,IANXC,QAAc,wBAAGC,KAAA,KAAAC,OAAA,SAAAV,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAX,SAAAH,WAAA,CAAAI,EAAAC,EAAAC,KAAA,KAAA,EAAA,OAAAE,EAAAG,EAAAI,KACXX,QAAAA,IADWI,GAAAG,EAAAW,OAAA,SAAA,CAAAJ,KAAA,IAgBfG,OAAQ,UAhBOE,QAAA,iCAEbhB,KAAAA,IAFa,KAAA,GAAA,IAAA,MAAA,OAAAI,EAAAa,WAAAC,eAKV,WAAA,IAAAC,EAAA,OAAAjB,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAAAc,EAAAf,KAAA,EAAAe,EAAAd,KAAA,EAAAJ,mBAAAK,MAEOX,SAFPF,mBAAA,KAAA,EAAA,OAEDsB,EAFCI,EAAAZ,KAGDK,QAAIQ,IAACF,GAHJC,EAAAL,OAAA,SAIDD,CATWH,KAAA,IAgCXG,OAAQ,UAhCGE,QAAA,oCAAAH,KAAAM,IAKV,KAAA,EAAA,MAAAC,EAAAf,KAAA,EAAAe,EAAAE,GAAAF,EAAA,MAAA,GALUV,QAAAa,MAAA,2BAAAH,EAAAE,IAYbrB,CACNS,KAAQW,IAbWP,OAAA,QAefH,QADG,2BAEHG,KAAM,MAXD,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAH,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MALUO,OAAAC,QAAA,CAAAb,eAAAA,eAAAM,eAAAA","file":"products.service.min.js","sourcesContent":["const { addProduct, fetchAllProducts, findProductbyName} = require('../queries/products');\r\nconst { runQuery } = require('../config/database.config');\r\n\r\nconst createProducts = async (body) => {\r\n    const { name, price, quantity } = body;\r\n    const productExist= await runQuery (findProductbyName,[name])\r\n    if (productExist.length > 0){\r\n        console.log(productExist);\r\n        throw{\r\n            code:409,\r\n            message:'Product already exist',\r\n            data:null,\r\n            status:'error'\r\n        }\r\n    } \r\n    const response = await runQuery(addProduct, [name,price,quantity])\r\n    console.log(response);\r\n    return {\r\n        code: 201,\r\n        status: 'success',\r\n        message: 'New product added successfully',\r\n        data:response\r\n    }\r\n}\r\n\r\n/*const fetchAllProducts=`\r\nSELECT \r\nname, price,quantity_sold,quantity FROM products\r\n`*/\r\nconst getAllProducts = async () => {\r\n    try {\r\n        const fetchProducts = await runQuery(fetchAllProducts);\r\n        console.log(fetchProducts);\r\n        return {\r\n            code: 200,\r\n            status: 'success',\r\n            message: 'All Products fetched successfully',\r\n            data: fetchProducts,\r\n        };\r\n    } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n        throw {\r\n            code: 500, \r\n            status: 'error',\r\n            message: 'Failed to fetch products',\r\n            data: null,\r\n        };\r\n    }\r\n};\r\n\r\n\r\n\r\nmodule.exports = {\r\n    createProducts,\r\n    getAllProducts\r\n};\r\n"]}