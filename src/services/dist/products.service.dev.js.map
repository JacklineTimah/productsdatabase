{"version":3,"sources":["products.service.js"],"names":["require","addProduct","fetchAllProducts","findProductbyName","runQuery","createProducts","body","name","price","quantity","productExist","length","console","log","code","message","data","status","response","getAllProducts","fetchProducts","error","module","exports"],"mappings":";;eAA2DA,OAAO,CAAC,qBAAD,C;IAA1DC,U,YAAAA,U;IAAYC,gB,YAAAA,gB;IAAkBC,iB,YAAAA,iB;;gBACjBH,OAAO,CAAC,2BAAD,C;IAApBI,Q,aAAAA,Q;;AAER,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,UAAAA,IADW,GACeD,IADf,CACXC,IADW,EACLC,KADK,GACeF,IADf,CACLE,KADK,EACEC,QADF,GACeH,IADf,CACEG,QADF;AAAA;AAAA,0CAEOL,QAAQ,CAAED,iBAAF,EAAoB,CAACI,IAAD,CAApB,CAFf;;AAAA;AAEbG,UAAAA,YAFa;;AAAA,gBAGfA,YAAY,CAACC,MAAb,GAAsB,CAHP;AAAA;AAAA;AAAA;;AAIfC,UAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AAJe,gBAKV;AACDI,YAAAA,IAAI,EAAC,GADJ;AAEDC,YAAAA,OAAO,EAAC,uBAFP;AAGDC,YAAAA,IAAI,EAAC,IAHJ;AAIDC,YAAAA,MAAM,EAAC;AAJN,WALU;;AAAA;AAAA;AAAA,0CAYIb,QAAQ,CAACH,UAAD,EAAa,CAACM,IAAD,EAAMC,KAAN,EAAYC,QAAZ,CAAb,CAZZ;;AAAA;AAYbS,UAAAA,QAZa;AAanBN,UAAAA,OAAO,CAACC,GAAR,CAAYK,QAAZ;AAbmB,2CAcZ;AACHJ,YAAAA,IAAI,EAAE,GADH;AAEHG,YAAAA,MAAM,EAAE,SAFL;AAGHF,YAAAA,OAAO,EAAE,gCAHN;AAIHC,YAAAA,IAAI,EAACE;AAJF,WAdY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;AAsBA;;;;;;AAIA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEaf,QAAQ,CAACF,gBAAD,CAFrB;;AAAA;AAETkB,UAAAA,aAFS;AAGfR,UAAAA,OAAO,CAACC,GAAR,CAAYO,aAAZ;AAHe,4CAIR;AACHN,YAAAA,IAAI,EAAE,GADH;AAEHG,YAAAA,MAAM,EAAE,SAFL;AAGHF,YAAAA,OAAO,EAAE,mCAHN;AAIHC,YAAAA,IAAI,EAAEI;AAJH,WAJQ;;AAAA;AAAA;AAAA;AAWfR,UAAAA,OAAO,CAACS,KAAR,CAAc,0BAAd;AAXe,gBAYT;AACFP,YAAAA,IAAI,EAAE,GADJ;AAEFG,YAAAA,MAAM,EAAE,OAFN;AAGFF,YAAAA,OAAO,EAAE,0BAHP;AAIFC,YAAAA,IAAI,EAAE;AAJJ,WAZS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAuBAM,MAAM,CAACC,OAAP,GAAiB;AACblB,EAAAA,cAAc,EAAdA,cADa;AAEbc,EAAAA,cAAc,EAAdA;AAFa,CAAjB","sourcesContent":["const { addProduct, fetchAllProducts, findProductbyName} = require('../queries/products');\r\nconst { runQuery } = require('../config/database.config');\r\n\r\nconst createProducts = async (body) => {\r\n    const { name, price, quantity } = body;\r\n    const productExist= await runQuery (findProductbyName,[name])\r\n    if (productExist.length > 0){\r\n        console.log(productExist);\r\n        throw{\r\n            code:409,\r\n            message:'Product already exist',\r\n            data:null,\r\n            status:'error'\r\n        }\r\n    } \r\n    const response = await runQuery(addProduct, [name,price,quantity])\r\n    console.log(response);\r\n    return {\r\n        code: 201,\r\n        status: 'success',\r\n        message: 'New product added successfully',\r\n        data:response\r\n    }\r\n}\r\n\r\n/*const fetchAllProducts=`\r\nSELECT \r\nname, price,quantity_sold,quantity FROM products\r\n`*/\r\nconst getAllProducts = async () => {\r\n    try {\r\n        const fetchProducts = await runQuery(fetchAllProducts);\r\n        console.log(fetchProducts);\r\n        return {\r\n            code: 200,\r\n            status: 'success',\r\n            message: 'All Products fetched successfully',\r\n            data: fetchProducts,\r\n        };\r\n    } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n        throw {\r\n            code: 500, \r\n            status: 'error',\r\n            message: 'Failed to fetch products',\r\n            data: null,\r\n        };\r\n    }\r\n};\r\n\r\n\r\n\r\nmodule.exports = {\r\n    createProducts,\r\n    getAllProducts\r\n};\r\n"],"file":"products.service.dev.js"}