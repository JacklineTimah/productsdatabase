{"version":3,"sources":["user.service.js"],"names":["require","addUser","findUserByEmail","runQuery","bcrypt","createUser","body","email","console","log","password","length","code","message","data","status","hash","hashSync","username","response","saltRounds","user","dbPassword","id","compareSync","loginUser","expiresIn","token","jwt","sign","config","JWT_SECRET_KEY","options"],"mappings":"0BAAqCA,QAAQ,mBAArCC,iBAAAA,QAASC,yBAAAA,0BACIF,QAAQ,6BAArBG,mBAAAA,SACFC,OAF+BJ,QAAQ,UAArCC,IAGID,QAAQ,gBAHHE,OAAAA,QAIM,uBAEjBG,WALeL,SAAQM,GAARN,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAbG,EAMiCG,EANjCH,SAMaI,EAAoBD,EAApBC,MANbJ,EAMiCG,EANjCH,SASJK,QAAQC,IAAI,YAAaC,GATRV,EAAAA,KAAAA,EAAAA,mBAAAA,MAGEG,SAAAD,gBAAvB,CAAAK,KAHqBP,KAAAA,EAAAA,GAKfK,EALeL,EAAAA,KAKFW,OALEX,KAKF,CAAAY,KAAA,IAAAC,QAAA,sBAAAC,KAAA,KAAAC,OAAA,SALEf,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAKF,GAAAQ,QAAAC,IAAA,eAAA,IAwBTO,EAAOZ,OAAOa,SAASP,EAxBd,IAAAF,QAAAC,IAAA,kBAAAO,GALEhB,EAAAA,KAAAA,GAAAA,mBAAAA,MAkCMG,SAASF,QAAS,CAACiB,EAAUX,EAAOS,KAlC1ChB,KAAAA,GAAAA,OAkCXmB,EAlCWnB,EAAAA,KAAAA,EAAAA,OAAAA,SAgBTY,CACAC,KAAAA,IACAC,OAAI,UACJC,QAAAA,8BAJED,KAVKK,EAAA,KALEnB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,WAwBXoB,UAAAA,SAnBSd,GAmBTc,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAqBEb,EAAoBD,EAApBC,MAAOG,EAAaJ,EAAbI,SArBTU,EAAAA,KAAAA,EAAAA,mBAAAA,MAwBajB,SAASD,gBAAiB,CAACK,KAxBxCa,KAAAA,EAAAA,GAQM,KAgBNC,EAxBAD,EAAAA,MAQNZ,OARMY,KAnBS,CAAAR,KAAA,IA+CPG,OAAQ,QA/CDF,QAAA,iBA6BTM,KA7BS,MAmBTC,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,GAAAA,EAeOC,EAAA,GAAAC,EAfPF,EAeFP,SAASU,EAfPH,EAeOG,GACTT,QAAAA,IAAIO,EAAEF,IAnCKf,OAAAoB,YAAAd,EAAAY,GAmBTF,CAAAA,EAAAA,KAAAA,GAAAA,MAAAA,KAnBS,CAAAR,KAAA,IAAAG,OAAA,QAAAF,QAAA,uCAAAC,KAAA,MAmBTM,KAAAA,GAAAA,OAoBJK,EAAY,CAAAC,UAAA,MAAAC,EAAAC,IAAAC,KAAA,CAAAN,GAAAA,EACNhB,MAAAA,GADMuB,OAAAC,eAAAC,GApBRZ,EAAAA,OAAAA,SAoBQ,CAqCVL,OAAQ,UArCEF,QAAA,0BAIRQ,KAJQ,IAwCVP,KAAM,CAxCIS,GAAAA,EAAAhB,MAAAA,EAAAoB,MAAAA,KApBRP,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,WA6BEP,OAAAA,QAAAA,CACAC,WAAAA,WAAAA,UAAAA","file":"user.service.min.js","sourcesContent":["const { addUser, findUserByEmail } = require('../queries/user');\r\nconst { runQuery } = require('../config/database.config')\r\nconst bcrypt = require('bcrypt');\r\nconst jwt = require('jsonwebtoken');\r\nconst config = require('../config/env/index')\r\n\r\nconst createUser = async (body) => {\r\n    const {username, email, password } = body;\r\n\r\n    // Debug: Check the value of 'password'\r\n    console.log('Password:', password);\r\n\r\n    // Check if user already exists in the database\r\n    const userExist = await runQuery(findUserByEmail,  [email]);\r\n\r\n    if (userExist.length > 0) {\r\n        throw {\r\n            code: 409,\r\n            message: 'User already exists',\r\n            data: null,\r\n            status: 'error'\r\n        };\r\n    }\r\n\r\n    // Encrypt password\r\n    const saltRounds = 12;\r\n    \r\n    // Debug: Check the value of 'saltRounds'\r\n    console.log('Salt Rounds:', saltRounds);\r\n\r\n    const hash = bcrypt.hashSync(password, saltRounds);\r\n    \r\n    // Debug: Check the generated hash\r\n    console.log('Generated Hash:', hash);\r\n\r\n    const response = await runQuery(addUser, [username, email, hash]);\r\n\r\n    return {\r\n        code: 201,\r\n        status: 'success',\r\n        message: 'New user added successfully',\r\n        data: response[0]\r\n    };\r\n}\r\n\r\nconst loginUser = async (body) => {\r\n    const { email, password } = body;\r\n\r\n    // Check if that user exists inside the db\r\n    const user = await runQuery(findUserByEmail, [email]);\r\n    if (user.length === 0) {\r\n        throw {\r\n            code: 404,\r\n            status: 'error',\r\n            message: 'User not found',\r\n            data: null\r\n        }\r\n    }\r\n    // Compare user passwords\r\n    const { password: dbPassword, id } = user[0];\r\n    console.log(user[0])\r\n    const userPassword = bcrypt.compareSync(password, dbPassword); // Boolean true/false\r\n    if (!userPassword) {\r\n        throw {\r\n            code: 400,\r\n            status: 'error',\r\n            message: 'Wrong email and password combination',\r\n            data: null\r\n        }\r\n    }\r\n\r\n    const options = {\r\n        'expiresIn': '1d'\r\n    }\r\n\r\n    // Generate token for authentication purposes\r\n    const token = jwt.sign({\r\n        id,\r\n        email\r\n        \r\n    }, config.JWT_SECRET_KEY, options);\r\n    return {\r\n        status: 'success',\r\n        message: 'User login successfully',\r\n        code: 200,\r\n        data: {\r\n            id,\r\n            email,\r\n            token\r\n        }\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    createUser,loginUser\r\n};"]}