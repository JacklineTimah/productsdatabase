{"version":3,"sources":["error.middleware.js"],"names":["module","exports","notFound","req","res","status","json","code","message","appErrorHandler","err","next","console","log","originalUrl","method","ip","genericErrorHandler","stack","data"],"mappings":";;AAAA;;;;;;AAMAA,MAAM,CAACC,OAAP,CAAeC,QAAf,GAA0B,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;AAClDA,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,IAAAA,IAAI,EAAE,GADW;AAEjBC,IAAAA,OAAO,EAAE;AAFQ,GAArB;AAIH,CALD;AAOA;;;;;;;;AAQA;;;AACAR,MAAM,CAACC,OAAP,CAAeQ,eAAf,GAAiC,SAASA,eAAT,CAAyBC,GAAzB,EAA8BP,GAA9B,EAAmCC,GAAnC,EAAwCO,IAAxC,EAA8C;AAC3E,MAAID,GAAG,CAACH,IAAJ,IAAY,OAAOG,GAAG,CAACH,IAAX,KAAoB,QAApC,EAA8C;AAC1CK,IAAAA,OAAO,CAACC,GAAR,4BACSH,GAAG,CAACH,IADb,+BAEUG,GAAG,CAACF,OAFd,4BAGML,GAAG,CAACW,WAHV,+BAISX,GAAG,CAACY,MAJb,2BAKKZ,GAAG,CAACa,EALT;AAQAZ,IAAAA,GAAG,CAACC,MAAJ,CAAWK,GAAG,CAACH,IAAf,EAAqBD,IAArB,CAA0B;AACtBC,MAAAA,IAAI,EAAEG,GAAG,CAACH,IADY;AAEtBC,MAAAA,OAAO,EAAEE,GAAG,CAACF;AAFS,KAA1B;AAIH,GAbD,MAaO;AACHG,IAAAA,IAAI,CAACD,GAAD,CAAJ;AACH;AACJ,CAjBD;AAmBA;;;;;;;;;;AAQAV,MAAM,CAACC,OAAP,CAAegB,mBAAf,GAAqC,SAASA,mBAAT,CAA6BP,GAA7B,EAAkCP,GAAlC,EAAuCC,GAAvC,EAA4CO,IAA5C,EAAkD;AACnFC,EAAAA,OAAO,CAACC,GAAR,8CAEYH,GAAG,CAACQ,KAFhB,0BAGQf,GAAG,CAACW,WAHZ,6BAIWX,GAAG,CAACY,MAJf,yBAKOZ,GAAG,CAACa,EALX;AAQAZ,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,IAAAA,IAAI,EAAE,GADW;AAEjBY,IAAAA,IAAI,EAAE,EAFW;AAGjBX,IAAAA,OAAO,EAAEE,GAAG,CAACF;AAHI,GAArB;AAKH,CAdD","sourcesContent":["/**\r\n * Error response middleware for 404 not found.\r\n *\r\n * @param {Object} req\r\n * @param {Object} res\r\n */\r\nmodule.exports.notFound = function notFound(req, res) {\r\n    res.status(404).json({\r\n        code: 404,\r\n        message: 'Ooops, route not found'\r\n    });\r\n}\r\n\r\n/**\r\n * Error response middleware for handling all app errors except generic errors.\r\n *\r\n * @param  {Object}   err\r\n * @param  {Object}   req\r\n * @param  {Object}   res\r\n * @param  {Function} next\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nmodule.exports.appErrorHandler = function appErrorHandler(err, req, res, next) {\r\n    if (err.code && typeof err.code === 'number') {\r\n        console.log(`\r\n      status - ${err.code}\r\n      message - ${err.message} \r\n      url - ${req.originalUrl} \r\n      method - ${req.method} \r\n      IP - ${req.ip}\r\n    `);\r\n\r\n        res.status(err.code).json({\r\n            code: err.code,\r\n            message: err.message\r\n        });\r\n    } else {\r\n        next(err);\r\n    }\r\n}\r\n\r\n/**\r\n * Generic error response middleware for internal server errors.\r\n *\r\n * @param  {Object}   err\r\n * @param  {Object}   req\r\n * @param  {Object}   res\r\n * @param  {Function} next\r\n */\r\nmodule.exports.genericErrorHandler = function genericErrorHandler(err, req, res, next) {\r\n    console.log(`\r\n    status - 500 \r\n    message - ${err.stack} \r\n    url - ${req.originalUrl} \r\n    method - ${req.method} \r\n    IP - ${req.ip}\r\n  `);\r\n\r\n    res.status(500).json({\r\n        code: 500,\r\n        data: '',\r\n        message: err.message\r\n    });\r\n}"],"file":"error.middleware.dev.js"}