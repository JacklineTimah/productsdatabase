{"version":3,"sources":["error.middleware.js"],"names":["module","exports","notFound","req","res","status","json","appErrorHandler","err","next","code","console","log","concat","message","originalUrl","genericErrorHandler","data","stack","method","ip"],"mappings":"aAMAA,OAAOC,QAAQC,SAAW,SAAkBC,EAAKC,GAC7CA,EAAIC,OAAO,KAAKC,KAAK,CADlBL,KAAP,IACQI,QAAJ,4BAcJL,OAAAC,QAAAM,gBAAA,SAAAC,EAAAL,EAAAC,EAAAK,GAEQD,EAAIE,MAA4B,iBAAbF,EAAIE,MACvBC,QAAQC,IAAR,oBAAAC,OAFON,EAAAA,KAEP,sBAAAM,OADYL,EAAAM,QACZ,mBAAAD,OAAQD,EAARG,YAAA,sBAAAF,OAQWL,EAAIE,OARf,kBAAAG,OASUL,EAAIE,GATd,WADJN,EAaOC,OAAAG,EAAAE,MAAAJ,KAAA,CACCI,KAAJF,EAAAE,KACHI,QAAAN,EAAAM,WADGL,EAAKD,IAsBLE,OAAAA,QADiBM,oBAAA,SAAAR,EAAAL,EAAAC,GAEjBa,QAFiBL,IAEjBK,sCAAAA,OAFJT,EAAAU,MAEID,iBAAAA,OAXRd,EAAAY,YAWQE,oBAAAA,OANOd,EAAIgB,OAMXF,gBAAAA,OALGd,EAAIiB,GAKPH,SAFJb,EAAIC,OAAO,KAAKC,KAAK,CACjBI,KAAM,IACNO,KAAM,GACNH,QAASN,EAAIM","file":"error.middleware.min.js","sourcesContent":["/**\r\n * Error response middleware for 404 not found.\r\n *\r\n * @param {Object} req\r\n * @param {Object} res\r\n */\r\nmodule.exports.notFound = function notFound(req, res) {\r\n    res.status(404).json({\r\n        code: 404,\r\n        message: 'Ooops, route not found'\r\n    });\r\n}\r\n\r\n/**\r\n * Error response middleware for handling all app errors except generic errors.\r\n *\r\n * @param  {Object}   err\r\n * @param  {Object}   req\r\n * @param  {Object}   res\r\n * @param  {Function} next\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nmodule.exports.appErrorHandler = function appErrorHandler(err, req, res, next) {\r\n    if (err.code && typeof err.code === 'number') {\r\n        console.log(`\r\n      status - ${err.code}\r\n      message - ${err.message} \r\n      url - ${req.originalUrl} \r\n      method - ${req.method} \r\n      IP - ${req.ip}\r\n    `);\r\n\r\n        res.status(err.code).json({\r\n            code: err.code,\r\n            message: err.message\r\n        });\r\n    } else {\r\n        next(err);\r\n    }\r\n}\r\n\r\n/**\r\n * Generic error response middleware for internal server errors.\r\n *\r\n * @param  {Object}   err\r\n * @param  {Object}   req\r\n * @param  {Object}   res\r\n * @param  {Function} next\r\n */\r\nmodule.exports.genericErrorHandler = function genericErrorHandler(err, req, res, next) {\r\n    console.log(`\r\n    status - 500 \r\n    message - ${err.stack} \r\n    url - ${req.originalUrl} \r\n    method - ${req.method} \r\n    IP - ${req.ip}\r\n  `);\r\n\r\n    res.status(500).json({\r\n        code: 500,\r\n        data: '',\r\n        message: err.message\r\n    });\r\n}"]}